name: release

# Only do the release on x.y.z tags.
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and __about__.py version are the same
        shell: bash
        run: |
          if ! grep -q "VERSION = \"$VERSION\"" GeoSeriesSolver/__about__.py; then
            echo "version does not match __about__.py" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: win-msvc
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Install dependencies
      run: pip install -r requirements.txt pyinstaller

    - name: Build
      run: pyinstaller GeoSeriesSolver.spec

    - name: Determine archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        echo "ARCHIVE=GeoSeriesSolver-$version-${{ matrix.target }}" >> $GITHUB_ENV

        - name: Creating directory for archive
          shell: bash
          run: |
            mkdir -p "$ARCHIVE"
            cp -r dist/GeoSeriesSolver/* "$ARCHIVE"/

        - name: Build archive (Windows)
          shell: bash
          if: matrix.os == 'windows-latest'
          run: |
            7z a "$ARCHIVE.zip" "$ARCHIVE"
            certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
            echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

        - name: Build archive (Unix)
          shell: bash
          if: matrix.os != 'windows-latest'
          run: |
            tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
            shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
            echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
            echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

        - name: Upload release archive
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: bash
          run: |
            version="${{ needs.create-release.outputs.version }}"
            gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}